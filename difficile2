CREATE DATABASE CHECK2
USE CHECK2

CREATE TABLE            PRODUITS (
   PRODUCTID         NUMERIC(6)                       NOT NULL,
   PRODUCTNAME        VARCHAR(40)                   NOT NULL,
   PRODUCTTYPE       VARCHAR(40)                       NOT NULL,
   PRICE    	 NUMERIC(9)                       NOT NULL,
   CONSTRAINT PK_PRODUITS  PRIMARY KEY (PRODUCTID),
  );

  CREATE TABLE            CLIENTS   (
   CUSTOMERID          VARCHAR(5)                         NOT NULL,
   CUSTOMERNAME              VARCHAR(40)                   NOT NULL,
   EMAIL            VARCHAR(60)                   NOT NULL,
   PHONE             NUMERIC(15)                    NOT NULL,
   CONSTRAINT PK_CLIENTS PRIMARY KEY (CUSTOMERID)
  );

  CREATE TABLE            COMMANDES  (
   ORDERID         NUMERIC(6)                       NOT NULL,
   CUSTOMERID         VARCHAR(5)                         NOT NULL,
   ORDERDATE	         DATE                           NOT NULL,
   CONSTRAINT PK_COMMANDES  PRIMARY KEY (ORDERID),
   FOREIGN KEY (CUSTOMERID) REFERENCES CLIENTS (CUSTOMERID) ON DELETE NO ACTION ON UPDATE NO ACTION
    );

CREATE TABLE           COMMANDE_DETAILS  (
   ORDERDETAILID       NUMERIC(6)                       NOT NULL,
   ORDERID        NUMERIC(6)                       NOT NULL,
   PRODUCTID     NUMERIC(8,2)                     NOT NULL,
   QUANTITY            NUMERIC(5)                       NOT NULL,
   CONSTRAINT PK_COMMANDE_DETAILS  PRIMARY KEY (ORDERDETAILID)
  );

  CREATE TABLE PRUDUITTYPES (
	PRODUCTTYPEID NUMERIC(7)				NOT NULL,
	PRODUTTYPENAME VARCHAR (30)				NOT NULL
	CONSTRAINT PK_PRUDUITTYPES   PRIMARY KEY (PRODUCTTYPEID));

INSERT INTO PRODUITS  VALUES  (1, 'WidgetA', 'Widget', 10.00);
INSERT INTO PRODUITS  VALUES  (2,'WidgetB','Widget',15.00);
INSERT INTO PRODUITS  VALUES  (3,'Gadget X','Gadget',20.00);
INSERT INTO PRODUITS  VALUES  (4,'Gaget Y','Gasdget',25.00);
INSERT INTO PRODUITS  VALUES  (5,'Machin Z','Machin Z',30.00);

INSERT INTO CLIENTS  VALUES  (1, 'John Smith', 'John@exemple.com', 123-456-7890);
INSERT INTO CLIENTS  VALUES  (2, 'Jane Doe', 'jane.doe@example.com', 987-654-3210);
INSERT INTO CLIENTS  VALUES  (3, 'Alice Brown', 'Alice.brown@example.com', 456-789-0123);


INSERT INTO COMMANDES  VALUES  (102,2,'2024-05-02');
INSERT INTO COMMANDES  VALUES  (101,1,'2024-05-01');
INSERT INTO COMMANDES  VALUES  (103, 3, '2024-05-01');



INSERT INTO COMMANDE_DETAILS  VALUES  (1, 101,1, 2);
INSERT INTO COMMANDE_DETAILS  VALUES  (2, 101,3, 1);
INSERT INTO COMMANDE_DETAILS  VALUES  (3, 102,2, 3);
INSERT INTO COMMANDE_DETAILS  VALUES  (4, 102,4, 2);
INSERT INTO COMMANDE_DETAILS  VALUES  (5, 103,5, 1);

INSERT INTO PRUDUITTYPES  VALUES  (1, 'Widget');
INSERT INTO PRUDUITTYPES  VALUES  (2, 'Gadget');
INSERT INTO PRUDUITTYPES  VALUES  (3, 'Doochikey');

SELECT * FROM PRODUITS

SELECT * FROM CLIENTS

SELECT * FROM COMMANDES

SELECT * FROM COMMANDE_DETAILS

SELECT * FROM PRUDUITTYPES

SELECT PRODUITS.PRODUCTNAME, SUM(COMMANDE_DETAILS.Quantity) AS TotalQuantity
FROM PRODUITS 
JOIN COMMANDE_DETAILS  ON PRODUITS.ProductID = COMMANDE_DETAILS.ProductID
GROUP BY PRODUITS.ProductName
HAVING SUM(COMMANDE_DETAILS.Quantity) > 0;

/* Récupérez les noms des clients qui ont passé une commande chaque jour de la semaine, 
ainsi que le nombre total de commandes passées par chaque client.*/

SELECT CLIENTS.CUSTOMERNAME, COUNT(DISTINCT COMMANDES.ORDERID) AS TQOrder
FROM CLIENTS 
JOIN COMMANDES  ON COMMANDES.CUSTOMERID = COMMANDES.CUSTOMERID
JOIN COMMANDE_DETAILS  ON COMMANDE_DETAILS.ORDERID = COMMANDES.ORDERID
GROUP BY CLIENTS.CUSTOMERNAME
HAVING  COUNT(DISTINCT DATEPART(WEEKDAY, COMMANDES.ORDERDATE)) = 7;

/*Récupérez les noms des clients ayant passé le plus de commandes, 
ainsi que le nombre total de commandes passées par chaque client.*/

SELECT CLIENTS.CUSTOMERNAME, COUNT(COMMANDE_DETAILS.QUANTITY) AS TotalOrders
FROM CLIENTS 
JOIN COMMANDES  ON CLIENTS.CUSTOMERID = COMMANDES.CUSTOMERID
JOIN COMMANDE_DETAILS COMMANDE_DETAILS ON COMMANDE_DETAILS.ORDERID = COMMANDE_DETAILS.ORDERID
GROUP BY CLIENTS.CUSTOMERNAME
ORDER BY TotalOrders ;

/*Récupérez les noms des produits qui ont été le plus commandés, 
ainsi que la quantité totale de chaque produit commandé.*/

SELECT PRODUITS.PRODUCTNAME, SUM(COMMANDE_DETAILS.QUANTITY) AS TotalQuantityOrdered
FROM PRODUITS 
JOIN COMMANDE_DETAILS COMMANDE_DETAILS ON PRODUITS.ProductID = COMMANDE_DETAILS.ProductID
GROUP BY PRODUITS.ProductName
ORDER BY TotalQuantityOrdered DESC;


/*Récupérer les noms des clients ayant passé commande pour au moins un widget*/
 
SELECT DISTINCT CLIENTS.CUSTOMERNAME
FROM CLIENTS 
JOIN COMMANDES  ON CLIENTS.CUSTOMERID = COMMANDES.CUSTOMERID
JOIN COMMANDE_DETAILS  ON COMMANDES.ORDERID = COMMANDE_DETAILS.ORDERID
JOIN PRODUITS  ON COMMANDE_DETAILS.PRODUCTID = PRODUITS.PRODUCTID
WHERE PRODUITS.PRODUCTTYPE = 'WIDGET';

/*Récupérez les noms des clients ayant passé commande d'au moins un widget et d'au moins un gadget,
ainsi que le coût total des widgets et gadgets commandés par chaque client.*/

SELECT CLIENTS.CustomerName, SUM(CASE 
WHEN PRODUITS.ProductType = 'WIDGET' THEN COMMANDE_DETAILS.Quantity * PRODUITS.Price 
WHEN PRODUITS.ProductType = 'GADGET' THEN COMMANDE_DETAILS.Quantity * PRODUITS.Price 
ELSE 0 
END) AS TotalCost
FROM CLIENTS 
JOIN COMMANDES  ON CLIENTS.CUSTOMERID = COMMANDES.CUSTOMERID
JOIN COMMANDE_DETAILS  ON COMMANDES.OrderID = COMMANDE_DETAILS.OrderID
JOIN PRODUITS  ON COMMANDE_DETAILS.ProductID = PRODUITS.ProductID
WHERE PRODUITS.ProductType IN ('WIDGET', 'GADGET')
GROUP BY CLIENTS.CustomerName
HAVING COUNT(DISTINCT CASE WHEN PRODUITS.ProductType = 'WIDGET' THEN PRODUITS.ProductID END) > 0
AND COUNT(DISTINCT CASE WHEN PRODUITS.ProductType = 'GADGET' THEN PRODUITS.ProductID END) > 0;

/*Récupérez les noms des clients ayant passé commande d'au moins un gadget, 
ainsi que le coût total des gadgets commandés par chaque client.*/

SELECT CLIENTS.CustomerName, SUM(COMMANDE_DETAILS.Quantity * PRODUITS.Price) AS TotalGadgetCost
FROM CLIENTS 
JOIN COMMANDES  ON CLIENTS.CUSTOMERID = COMMANDES.CUSTOMERID
JOIN COMMANDE_DETAILS  ON COMMANDES.OrderID = COMMANDE_DETAILS.OrderID
JOIN PRODUITS  ON COMMANDE_DETAILS.ProductID = PRODUITS.ProductID
WHERE PRODUITS.ProductType = 'GADGET'
GROUP BY CLIENTS.CustomerName
HAVING SUM(COMMANDE_DETAILS.Quantity) > 0;

/*Récupérez les noms des clients ayant passé commande d'au moins un bidule,
ainsi que le coût total des bidules commandés par chaque client.*/

SELECT CLIENTS.CustomerName, SUM(COMMANDE_DETAILS.Quantity * PRODUITS.PRICE) AS TotalBiduleCost
FROM CLIENTS 
JOIN COMMANDES  ON CLIENTS.CUSTOMERID = COMMANDES.CUSTOMERID
JOIN COMMANDE_DETAILS  ON COMMANDES.ORDERID = COMMANDE_DETAILS.ORDERID
JOIN PRODUITS  ON COMMANDE_DETAILS.PRODUCTID = PRODUITS.PRODUCTID
WHERE PRODUITS.ProductType = 'doochikey'
GROUP BY CLIENTS.CUSTOMERNAME
HAVING SUM(COMMANDE_DETAILS.Quantity) > 0;


/*Récupérez les noms des clients qui ont passé une commande chaque jour de la semaine,
ainsi que le nombre total de commandes passées par chaque client.*/

SELECT C.CUSTOMERNAME, COUNT(CM.OrderID) AS TotalOrders
FROM CLIENTS C
JOIN COMMANDES CM ON C.CUSTOMERID = CM.CUSTOMERID
GROUP BY C.CustomerName
HAVING COUNT(DISTINCT DATEPART(WEEKDAY, CM.ORDERDATE)) = 7;

/*Récupérez le nombre total de widgets et de gadgets commandés par chaque client, ainsi que le coût total des commandes.*/
SELECT CLIENTS.CustomerName, 
       SUM(CASE WHEN PRODUITS.ProductType = 'WIDGET' THEN COMMANDE_DETAILS.Quantity ELSE 0 END) AS TotalWidgets,
       SUM(CASE WHEN PRODUITS.ProductType = 'GADGET' THEN COMMANDE_DETAILS.Quantity ELSE 0 END) AS TotalGadgets,
       SUM(CASE WHEN PRODUITS.ProductType IN ('WIDGET', 'GADGET') THEN COMMANDE_DETAILS.Quantity * PRODUITS.Price ELSE 0 END) AS TotalCost
FROM CLIENTS 
JOIN COMMANDES  ON CLIENTS.CUSTOMERID = COMMANDES.CUSTOMERID
JOIN COMMANDE_DETAILS  ON COMMANDES.ORDERID= COMMANDE_DETAILS.ORDERID
JOIN PRODUITS  ON COMMANDE_DETAILS.PRODUCTID = PRODUITS.PRODUCTID
WHERE PRODUITS.ProductType IN ('WIDGET', 'GADGET')
GROUP BY CLIENTS.CustomerName;



	
